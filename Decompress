import java.io.*;

public class Decompress_A_File{
    public static void main(String[] args) throws Exception, ClassNotFoundException {
        if (args.length != 2) {
            System.out.println("Usage: java DecompressFile sourceFile targetFile");
            System.exit(1);
        }

        File sourceFile = new File(args[0]);
        if (!sourceFile.exists()) {
            System.out.println("File " + args[0] + " does not exist");
            System.exit(2);
        }

        ObjectInputStream objInStream = new ObjectInputStream(new FileInputStream(args[0]));
        Tree tree = (Tree) objInStream.readObject();

        String[] codes = (String[]) objInStream.readObject();
        StringBuilder codeStringBuilder = new StringBuilder();
        for (String code : codes) {
            if (code != null) {
                codeStringBuilder.append(code);
            }
        }
        objInStream.close();

        String dcode = decode(codeStringBuilder.toString(), tree);

        PrintStream fileOutStream = new PrintStream(new FileOutputStream(args[1]));
        fileOutStream.print(dcode);
        fileOutStream.close();

   
    }

    public static String decode(String code, Tree tree) {
        StringBuilder decoded = new StringBuilder();
        Tree.Node current = tree.root;

        for (int i = 0; i < code.length(); i++) {
            if (current.left == null && current.right == null) {
                decoded.append(current.element);
                current = tree.root;
            }

            if (code.charAt(i) == '0') {
                current = current.left;
            }
            else if (code.charAt(i) == '1') {
                current = current.right;
            }
            
        }

        return decoded.toString();
    }

}


    /** Define a Huffman coding tree */
    class Tree implements Comparable<Tree>, Serializable{
        Node root; // The root of the tree

        public Tree() {
        }

        /** Create a tree with two subtrees */
        public Tree(Tree t1, Tree t2) {
            root = new Node();
            root.left = t1.root;
            root.right = t2.root;
            root.weight = t1.root.weight + t2.root.weight;
        }

        /** Create a tree containing a leaf node */
        public Tree(int weight, char element) {
            root = new Node(weight, element);
        }

        @Override
/** Compare trees based on their weights */
        public int compareTo(Tree t) {
            if (root.weight < t.root.weight) // Purposely reverse the order
                return 1;
            else if (root.weight == t.root.weight)
                return 0;
            else
                return -1;
        }

        class Node implements Serializable{
            char element; // Stores the character for a leaf node
            int weight; // weight of the subtree rooted at this node
            Node left; // Reference to the left subtree
            Node right; // Reference to the right subtree
            String code = ""; // The code of this node from the root

            /** Create an empty node */
            public Node() {
            }

            /** Create a node with the specified weight and character */
            public Node(int weight, char element) {
                this.weight = weight;
                this.element = element;
            }
        }
    }

     class Heap<E extends Comparable<E>> {
        private java.util.ArrayList<E> list = new java.util.ArrayList<E>();

        /** Create a default heap */
        public Heap() {
        }

        /** Create a heap from an array of objects */
        public Heap(E[] objects) {
            for (int i = 0; i < objects.length; i++)
                add(objects[i]);
        }

        /** Add a new object into the heap */
        public void add(E newObject) {
            list.add(newObject); // Append to the heap
            int currentIndex = list.size() - 1; // The index of the last node

            while (currentIndex > 0) {
                int parentIndex = (currentIndex - 1) / 2;
// Swap if the current object is greater than its parent
                if (list.get(currentIndex).compareTo(list.get(parentIndex)) > 0) {
                    E temp = list.get(currentIndex);
                    list.set(currentIndex, list.get(parentIndex));
                    list.set(parentIndex, temp);
                } else
                    break; // the tree is a heap now

                currentIndex = parentIndex;
            }
        }

        /** Remove the root from the heap */
        public E remove() {
            if (list.size() == 0)
                return null;

            E removedObject = list.get(0);
            list.set(0, list.get(list.size() - 1));
            list.remove(list.size() - 1);

            int currentIndex = 0;
            while (currentIndex < list.size()) {
                int leftChildIndex = 2 * currentIndex + 1;
                int rightChildIndex = 2 * currentIndex + 2;

// Find the maximum between two children
                if (leftChildIndex >= list.size())
                    break; // The tree is a heap
                int maxIndex = leftChildIndex;
                if (rightChildIndex < list.size()) {
                    if (list.get(maxIndex).compareTo(list.get(rightChildIndex)) < 0) {
                        maxIndex = rightChildIndex;
                    }
                }

// Swap if the current node is less than the maximum
                if (list.get(currentIndex).compareTo(list.get(maxIndex)) < 0) {
                    E temp = list.get(maxIndex);
                    list.set(maxIndex, list.get(currentIndex));
                    list.set(currentIndex, temp);
                    currentIndex = maxIndex;
                } else
                    break; // The tree is a heap
            }

            return removedObject;
        }

        /** Get the number of nodes in the tree */
        public int getSize() {
            return list.size();
        }
    }
